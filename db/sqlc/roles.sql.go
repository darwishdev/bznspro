// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: roles.sql

package db

import (
	"context"
)

const createdRole = `-- name: CreatedRole :exec
SELECT role_insert($1 , $2)
`

type CreatedRoleParams struct {
	Title       string `json:"title"`
	Permissions int32  `json:"permissions"`
}

func (q *Queries) CreatedRole(ctx context.Context, arg CreatedRoleParams) error {
	_, err := q.db.ExecContext(ctx, createdRole, arg.Title, arg.Permissions)
	return err
}

const deletedRole = `-- name: DeletedRole :one
UPDATE roles
SET delete_at = now()
WHERE role_id = $1
RETURNING role_id, title
`

func (q *Queries) DeletedRole(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, deletedRole, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.Title)
	return i, err
}

const getdRole = `-- name: GetdRole :one
SELECT role_id, title FROM roles
WHERE role_id = $1 AND delete_at IS NULL
`

func (q *Queries) GetdRole(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getdRole, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.Title)
	return i, err
}

const getdRoleForUpdate = `-- name: GetdRoleForUpdate :one
SELECT role_id, title FROM roles
WHERE role_id = $1 AND delete_at IS NULL  LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetdRoleForUpdate(ctx context.Context, roleID int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getdRoleForUpdate, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.Title)
	return i, err
}

const listroles = `-- name: Listroles :many
SELECT role_id, title FROM roles WHERE delete_at IS NULL 
ORDER BY role_id
LIMIT $1
OFFSET $2
`

type ListrolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listroles(ctx context.Context, arg ListrolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listroles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.RoleID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatedRole = `-- name: UpdatedRole :one
UPDATE roles
SET "title" = $2
WHERE role_id = $1
RETURNING role_id, title
`

type UpdatedRoleParams struct {
	RoleID int64  `json:"role_id"`
	Title  string `json:"title"`
}

func (q *Queries) UpdatedRole(ctx context.Context, arg UpdatedRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updatedRole, arg.RoleID, arg.Title)
	var i Role
	err := row.Scan(&i.RoleID, &i.Title)
	return i, err
}
